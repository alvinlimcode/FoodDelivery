// <auto-generated />
using System;
using FoodDelivery.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDelivery.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181120143745_AddedMoreFoods")]
    partial class AddedMoreFoods
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodDelivery.Data.Entities.Foods.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long?>("FoodTypeId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<string>("LongDescription");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("RestaurantId");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(250);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FoodTypeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Foods");

                    b.HasData(
                        new { Id = 1L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 1L, ImageUrl = "egg-food-fried-rice-53121 (1).jpg", Name = "Kimchi Fried Rice With Egg", Price = 7.00m, RestaurantId = 1L, ShortDescription = "Spicy fragnance kimchi fried rice together with an egg good enough for a simple meal!", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 2L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 5L, ImageUrl = "appetizer-bowl-breakfast-280018.jpg", Name = "Healthy Breakfast Wrap", Price = 8.00m, RestaurantId = 2L, ShortDescription = "A healthy simple breakfast for wrap lover!", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 3L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 3L, ImageUrl = "appetizer-chicken-chicken-dippers-1059943.jpg", LongDescription = "Something you cannot miss as an appetizer", Name = "Chicken Dipper", Price = 4.00m, RestaurantId = 2L, ShortDescription = "Delicious snack fried chicken dipper with mayonnaise sauce", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 4L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 3L, ImageUrl = "appetizer-close-up-cucumber-406152.jpg", LongDescription = "Good for vegan", Name = "Vegetables Salad", Price = 5.00m, RestaurantId = 2L, ShortDescription = "Only vegetables", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 5L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 1L, ImageUrl = "asian-food-bowl-cuisine-699953.jpg", LongDescription = "We use only fresh big prawns and ingredients to cook the best prawn noodle in the town.", Name = "Prawn Noodle", Price = 6.00m, RestaurantId = 1L, ShortDescription = "Fresh prawn and ingredients", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 6L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 4L, ImageUrl = "bakery-baking-blueberries-291528.jpg", LongDescription = "Delicious blueberry chocolate cake for birthday and any party occassions.", Name = "Blueberry Chocolate Cake", Price = 30.00m, RestaurantId = 2L, ShortDescription = "Baked with love!", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 7L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 1L, ImageUrl = "barbecue-bbq-cooking-111131.jpg", LongDescription = "", Name = "Skewed Meat", Price = 7.00m, RestaurantId = 1L, ShortDescription = "Juicy skewed meat with secret sauce", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 8L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 3L, ImageUrl = "basil-close-up-cooking-725997.jpg", LongDescription = "", Name = "Tomato Prawn Spaghetti", Price = 13.00m, RestaurantId = 2L, ShortDescription = "Spaghetti with tomato sauce and prawns", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 9L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 2L, ImageUrl = "beef-bread-burger-156114.jpg", LongDescription = "", Name = "Big beef cheeseburger", Price = 15.00m, RestaurantId = 2L, ShortDescription = "A full big beef cheeseburger for dinner", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 10L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 5L, ImageUrl = "blur-breakfast-close-up-376464.jpg", LongDescription = "", Name = "Pancake", Price = 4.00m, RestaurantId = 2L, ShortDescription = "Just a pancake", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 11L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 1L, ImageUrl = "bowl-cooking-cuisine-698549.jpg", LongDescription = "", Name = "Chasiu Noodle", Price = 5.00m, RestaurantId = 1L, ShortDescription = "A normal Chasiu Noodle", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 12L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 5L, ImageUrl = "bread-breakfast-bun-461382.jpg", LongDescription = "", Name = "Ham Sandwich", Price = 7.00m, RestaurantId = 2L, ShortDescription = "Ham Sandwich", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 13L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 5L, ImageUrl = "breakfast-chocolate-cream-264727.jpg", LongDescription = "", Name = "Crepe", Price = 7.00m, RestaurantId = 2L, ShortDescription = "Colorful Crepe for breakfast", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 14L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 5L, ImageUrl = "burrito-chicken-close-up-461198.jpg", LongDescription = "", Name = "Buritto Chicken", Price = 6.00m, RestaurantId = 2L, ShortDescription = "Buritto Chicken", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 15L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 6L, ImageUrl = "cheese-close-up-crust-1146760.jpg", LongDescription = "", Name = "Pizza", Price = 13.00m, RestaurantId = 2L, ShortDescription = "Pizza lover", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 16L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 3L, ImageUrl = "chicken-chips-delicious-7782.jpg", LongDescription = "", Name = "Chicken & Chips", Price = 5.00m, RestaurantId = 2L, ShortDescription = "Chicken & Chips", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 17L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 1L, ImageUrl = "chicken-close-up-crispy-60616.jpg", LongDescription = "", Name = "Crispy Fried Chicken", Price = 5.00m, RestaurantId = 1L, ShortDescription = "Crispy Fried Chicken", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 18L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 7L, ImageUrl = "chicken-dinner-dish-236781.jpg", LongDescription = "", Name = "Roast Chicken with Potatoes", Price = 12.00m, RestaurantId = 2L, ShortDescription = "Roast Chicken with Potatoes", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 19L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 1L, ImageUrl = "chopsticks-cuisine-dinner-46247.jpg", LongDescription = "", Name = "Pad Thai", Price = 5.00m, RestaurantId = 1L, ShortDescription = "Pad Thai", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 20L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 7L, ImageUrl = "close-up-cooking-dinner-46239.jpg", LongDescription = "", Name = "Baked Salmon", Price = 9.00m, RestaurantId = 2L, ShortDescription = "Baked Salmon", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 21L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), FoodTypeId = 4L, ImageUrl = "cream-dessert-glass-8382.jpg", LongDescription = "", Name = "Strawberry Yogurt", Price = 8.00m, RestaurantId = 2L, ShortDescription = "Strawberry Yogurt", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("FoodDelivery.Data.Entities.Foods.FoodType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("FoodTypes");

                    b.HasData(
                        new { Id = 1L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 574, DateTimeKind.Local), Name = "Asian Foods", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) },
                        new { Id = 2L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local), Name = "Burgers", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) },
                        new { Id = 3L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local), Name = "Appetizers", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) },
                        new { Id = 4L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local), Name = "Desserts", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) },
                        new { Id = 5L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local), Name = "Breakfast", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) },
                        new { Id = 6L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local), Name = "Pizzas", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) },
                        new { Id = 7L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local), Name = "Roast", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 576, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("FoodDelivery.Data.Entities.Restaurants.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new { Id = 1L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), Name = "Authentic Asian Food Restaurant", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) },
                        new { Id = 2L, CreatedBy = "seed", CreatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local), Name = "Western Food Restaurant", UpdatedBy = "seed", UpdatedDate = new DateTime(2018, 11, 20, 22, 37, 44, 577, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("FoodDelivery.Data.Entities.Reviews.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long?>("FoodId");

                    b.Property<int>("Rating");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FoodDelivery.Data.Entities.Foods.Food", b =>
                {
                    b.HasOne("FoodDelivery.Data.Entities.Foods.FoodType", "FoodType")
                        .WithMany()
                        .HasForeignKey("FoodTypeId");

                    b.HasOne("FoodDelivery.Data.Entities.Restaurants.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("FoodDelivery.Data.Entities.Reviews.Review", b =>
                {
                    b.HasOne("FoodDelivery.Data.Entities.Foods.Food", "Food")
                        .WithMany("Reviews")
                        .HasForeignKey("FoodId");
                });
#pragma warning restore 612, 618
        }
    }
}
